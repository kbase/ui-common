
define('kbaseOntologyDictionary',
    [
        'jquery',
        'datatables',
        'kbaseAuthenticatedWidget',
        'kbase-client-api',
        'bootstrap',
        'kbaseTable',
    ], function( $ ) {

    'use strict';

    $.KBWidget({

	    name: "kbaseOntologyDictionary",
	    parent: "kbaseAuthenticatedWidget",

        version: "1.0.0",
        options: {
            dictionary_object    : 'plant_ontology',
            dictionary_workspace : 'KBaseOntology',
            workspaceURL         : "https://ci.kbase.us/services/ws", //window.kbconfig.urls.workspace,
        },

        parseWorkspaceData : function parseWorkspaceData(d1, d2) {},

        init : function init(options) {

          this._super(options);

          var $self = this;

          var ws = new Workspace(this.options.workspaceURL, {token : $self.authToken()});

          var dictionary_params = {
              workspace : this.options.dictionary_workspace,
              name      : this.options.dictionary_object,
          };

          ws.get_objects([dictionary_params]).then(function(data) {

            var data = data[0].data;

            console.log("GOT ME DATA", data);
            $self.dataset = data;

            var $metaElem = $self.data('metaElem');

            $metaElem.empty();

            var $metaTable = $.jqElem('div').kbaseTable(
              {
                structure : {
                  keys : [
                    {value : 'format-version',                    label : 'Format version'},
                    {value : 'data-version',                      label : 'Data version'},
                    {value : 'date'},
                    {value : 'saved-by',                          label : 'Saved By'},
                    {value : 'auto-generated-by',                 label : 'Auto Generated By'},
                    {value : 'subsetdef'},
                    {value : 'synonymtypedef'},
                    {value : 'default-namespace',                 label : 'Default Namespace'},
                    {value : 'treat-xrefs-as-genus-differentia',  label : 'Treat XREFs as genus differentia'},
                    {value : 'treat-xrefs-as-is_a',               label : 'Treat XREFs as "is a"'},
                    {value : 'ontology',                          label : 'ontology'}
                  ],
                  rows : {
                    'format-version'                      : data.format_version,
                    'data-version'                        : data.data_version,
                    'date'                                : data.date,
                    'saved-by'                            : data.saved_by,
                    'auto-generated-by'                   : data.auto_generated_by,
                    'subsetdef'                           : $.isArray(data.subsetdef) ? data.subsetdef.join('<br>') : data.subsetdef,
                    'synonymtypedef'                      : $.isArray(data.synonymtypedef) ? data.synonymtypedef.join('<br>') : data.synonymtypedef,
                    'default-namespace'                   : data.default_namespace,
                    'treat-xrefs-as-genus-differentials'  : $.isArray(data.treat_xrefs_as_differentia) ? data.treat_xrefs_as_differentia.join('<br>') : data.treat_xrefs_as_differentia,
                    'treat-xrefs-as-is_a'                 : $.isArray(data.treat_xrefs_as_is_a) ? data.treat_xrefs_as_is_a.join('<br>') : data.treat_xrefs_as_is_a,
                    'ontology'                            : data.ontology
                  }
                }
            }
          );

          $metaElem.append($metaTable.$elem);

              var table_data = []

              $.each(
                data.term_hash,
                function (k, v) {


                  table_data.push(
                    [
                      v,
                      //[v.name, $.isArray(v.synonym) ? v.synonym.join('<br>') : v.synonym, v.def].join('<br>')
                      v.name,
                      [v.name, v.id, v.def, v.synonym, v.xref].join(',')
                    ]
                  )
                }
              );

              var $dt = $self.data('tableElem').DataTable({
                  columns : [
                      { title : 'Term ID', 'class' : 'ontology-top'},
                      { title : 'Term name'},
                      { title : 'Search field', 'visible' : false }
                  ],
                  createdRow : function(row, data, index) {

                    var $cell = $('td', row).eq(0);
                    $cell.empty();

                    var v = data[0];

                    var $link = $.jqElem('a')
                      .append(v.id)
                      .on('click', function(e) {
                        $self.appendTerm(v);
                      });

                    $cell.append($link)
                  }
              });
              $dt.rows.add(table_data).draw();

              console.log("TABLE DATA", table_data, $dt.rows, $dt.rows.add)

              $self.data('loaderElem').hide();
              $self.data('globalContainerElem').show();

            })
            .fail(function(d) {

                $self.$elem.empty();
                $self.$elem
                    .addClass('alert alert-danger')
                    .html("Could not load object : " + d.error.message);
            })



            this.appendUI(this.$elem);

            return this
        },

        getTerm : function(term_id) {
          return this.dataset.term_hash[term_id]
        },

        parseISA : function(isa) {

          var ids = []
console.log("PARSE", isa)
          $.each(
            isa,
            function (i, v) {
            console.log("ITERATE", v)
              var parts = v.split(/\s*!\s*/)
              ids.push(parts[0])
            }
          )
console.log("RET", ids);
          return ids;
        },

        getLineage : function(term_id, recursive) {

          var $self = this;

          var term    = this.getTerm(term_id);
          console.log("CHECK TERM", term, term_id)
          var parents = {}
          if (term.is_a) {
            $.each(
              this.parseISA(term.is_a),
              function (i, v) {
                parents[v] = undefined
              }
            )
          }
          else {
            return undefined
          }


          $.each(
            parents,
            function (k, v) {
            console.log("P DIC", k, v, parents)
              parents[k] = $self.getLineage(k, true);
            }
          )

          console.log("PARENTS : ", parents);

          if (! recursive) {
            //okay...at this point, it's the initial term we looked up
            console.log(parents);
            //$self.reverseLineage(parents);
          }

          return parents;

        },

        buildLineageElem : function(lineage) {

          var $self = this;

          var $ul = $.jqElem('ul')
          var $li = $.jqElem('li');
          $ul.append($li);

          var lineage = {};

          $.each(lineage, function(k, v) {
            $li.append(k);
            if (v != undefined) {
              lineage = $self.buildLineageElem(v);
              $parent.append($ul)
            }
          });

          return {root : $parent, parent : $ul};

        },

        appendTerm : function(term) {
          var $self = this;

          var $termElem = $self.data('termElem');
          $termElem.empty();
          $self.data('termContainerElem').show();
          $self.data('metaContainerElem').find('.panel-heading').find('i').removeClass('fa-rotate-90');
          $self.data('containerElem').find('.panel-heading').find('i').removeClass('fa-rotate-90');
          $self.data('metaContainerElem').find('.panel-body').collapse('hide');
          $self.data('containerElem').find('.panel-body').collapse('hide');

var lineage = $self.getLineage(term.id);
console.log(lineage);

var $lineageElem = $self.buildLineageElem(lineage);

          var $table = $.jqElem('div').kbaseTable(
            {
              structure : {
                keys : [{value : 'id', label : 'ID'}, 'name', 'def', 'namespace', 'synonym', 'comment', {value : 'is_a', label : 'Is A'}, 'relationship', 'xref'],
                rows : {
                  id            : term.id,
                  name          : term.name,
                  def           : term.def,
                  namespace     : term.namespace,
                  synonym       : $.isArray(term.synonym) ? term.synonym.join('<br>') : term.synonym,
                  comment       : term.comment,
                  is_a          : $lineageElem,//term.is_a,
                  relationship  : term.relationship,
                  xref          : $.isArray(term.xref) ? term.xref.join('<br>') : term.xref,
                }
              }
            }
          );

          $termElem.append($table.$elem);

        },

        appendUI : function appendUI($elem) {

            $elem
              .css({
                'width'         : '95%',
                'padding-left'  : '10px'
              })
            ;

            $elem.append($.jqElem('style').text('.ontology-top { vertical-align : top }'));

            var $self = this;

            var $loaderElem = $.jqElem('div')
                    .append('<br>&nbsp;Loading data...<br>&nbsp;please wait...<br>&nbsp;Data parsing may take upwards of 30 seconds, during which time this page may be unresponsive.')
                    .append($.jqElem('br'))
                    .append(
                        $.jqElem('div')
                            .attr('align', 'center')
                            .append($.jqElem('i').addClass('fa fa-spinner').addClass('fa fa-spin fa fa-4x'))
                    )
            ;

            $self.data('loaderElem', $loaderElem);
            $elem.append($loaderElem);

            var $globalContainer = $self.data('globalContainerElem', $.jqElem('div').css('display', 'none'));
            $elem.append($globalContainer);

            var $metaElem = $self.data('metaElem', $.jqElem('div'));

            var $metaContainerElem = $.jqElem('div')
              .addClass('panel panel-default')
              .append(
                $.jqElem('div')
                  .addClass('panel-heading')
                  .on('click', function(e) {
                    $(this).next().collapse('toggle')
                    $(this).find('i').toggleClass('fa-rotate-90')

                  })
                  .append(
                    $.jqElem('div')
                      .addClass('panel-title')
                      .append(
                        $.jqElem('i')
                          .addClass('fa fa-chevron-right fa-rotate-90')
                          .css('color', 'lightgray')
                      )
                      .append('&nbsp; Genome Dictionary')
                  )
              )
              .append(
                $.jqElem('div')
                  .addClass('panel-body collapse in')
                    .append($metaElem)
              )
            ;

            $self.data('metaContainerElem', $metaContainerElem);
            $globalContainer.append($metaContainerElem);

            var $tableElem = $.jqElem('table')
              .addClass('display')
            ;

            $self.data('tableElem', $tableElem);

            var $containerElem = $.jqElem('div')
              .addClass('panel panel-default')
              .append(
                $.jqElem('div')
                  .addClass('panel-heading')
                  .on('click', function(e) {
                    $(this).next().collapse('toggle')
                    $(this).find('i').toggleClass('fa-rotate-90')

                  })
                  .append(
                    $.jqElem('div')
                      .addClass('panel-title')
                      .append(
                        $.jqElem('i')
                          .addClass('fa fa-chevron-right fa-rotate-90')
                          .css('color', 'lightgray')
                      )
                      .append('&nbsp; Term Dictionary')
                  )
              )
              .append(
                $.jqElem('div')
                  .addClass('panel-body collapse in')
                    .append($tableElem)
              )
            ;

            $self.data('containerElem', $containerElem);
            $globalContainer.append($containerElem);

            var $termElem = $self.data('termElem', $.jqElem('div'));

            var $termContainerElem = $.jqElem('div')
              .css('display', 'none')
              .addClass('panel panel-default')
              .append(
                $.jqElem('div')
                  .addClass('panel-heading')
                  .on('click', function(e) {
                    $(this).next().collapse('toggle')
                    $(this).find('i').toggleClass('fa-rotate-90')

                  })
                  .append(
                    $.jqElem('div')
                      .addClass('panel-title')
                      .append(
                        $.jqElem('i')
                          .addClass('fa fa-chevron-right fa-rotate-90')
                          .css('color', 'lightgray')
                      )
                      .append('&nbsp; Term')
                  )
              )
              .append(
                $.jqElem('div')
                  .addClass('panel-body collapse in')
                    .append($termElem)
              )
            ;

            $self.data('termContainerElem', $termContainerElem);
            $globalContainer.append($termContainerElem);

            return $elem

        },

    });

} );
